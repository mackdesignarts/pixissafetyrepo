//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SafetyTraining.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PixisSafetyDBEntities : DbContext
    {
        public PixisSafetyDBEntities()
            : base("name=PixisSafetyDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CertificationAgency> CertificationAgencies { get; set; }
        public virtual DbSet<CertificationStatu> CertificationStatus { get; set; }
        public virtual DbSet<Checklist> Checklists { get; set; }
        public virtual DbSet<ClassAttendee> ClassAttendees { get; set; }
        public virtual DbSet<Class> Classes { get; set; }
        public virtual DbSet<ClassSession> ClassSessions { get; set; }
        public virtual DbSet<ClassSignInSheet> ClassSignInSheets { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<CoursesTaken> CoursesTakens { get; set; }
        public virtual DbSet<CoursesTakenHistory> CoursesTakenHistories { get; set; }
        public virtual DbSet<CrewDetail> CrewDetails { get; set; }
        public virtual DbSet<Crew> Crews { get; set; }
        public virtual DbSet<CrewStatu> CrewStatus { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeHistory> EmployeeHistories { get; set; }
        public virtual DbSet<EmployeeMedical> EmployeeMedicals { get; set; }
        public virtual DbSet<EmployeeMedicalRequired> EmployeeMedicalRequireds { get; set; }
        public virtual DbSet<EmployeeNote> EmployeeNotes { get; set; }
        public virtual DbSet<EmployeeNotesHistory> EmployeeNotesHistories { get; set; }
        public virtual DbSet<EmployeePosition> EmployeePositions { get; set; }
        public virtual DbSet<EmployeeStatu> EmployeeStatus { get; set; }
        public virtual DbSet<Instructor> Instructors { get; set; }
        public virtual DbSet<JobCertification> JobCertifications { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<LocationCode> LocationCodes { get; set; }
        public virtual DbSet<MedicalTest> MedicalTests { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<TLCompany> TLCompanies { get; set; }
        public virtual DbSet<UserAccess> UserAccesses { get; set; }
        public virtual DbSet<UserAccessFlag> UserAccessFlags { get; set; }
        public virtual DbSet<UserCompany> UserCompanies { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<dbo_CTL_TS__COMPANY_INFORMATION_BAD> dbo_CTL_TS__COMPANY_INFORMATION_BAD { get; set; }
        public virtual DbSet<dbo_JCM_MASTER__JOB_BAD> dbo_JCM_MASTER__JOB_BAD { get; set; }
        public virtual DbSet<dbo_PRM_MASTER__EMPLOYEE1> dbo_PRM_MASTER__EMPLOYEE1 { get; set; }
        public virtual DbSet<JCM_MASTER__JOB> JCM_MASTER__JOB { get; set; }
        public virtual DbSet<PRM_MASTER__EMPLOYEE> PRM_MASTER__EMPLOYEE { get; set; }
        public virtual DbSet<tblCourseBAD> tblCourseBADs { get; set; }
        public virtual DbSet<tblEmployeeCourseBAD> tblEmployeeCourseBADs { get; set; }
        public virtual DbSet<tblInstructorBAD> tblInstructorBADs { get; set; }
        public virtual DbSet<tblLocationBAD> tblLocationBADs { get; set; }
        public virtual DbSet<vCoursesTaken> vCoursesTakens { get; set; }
        public virtual DbSet<vCoursesTakenOLD> vCoursesTakenOLDs { get; set; }
        public virtual DbSet<vEmployee> vEmployees { get; set; }
        public virtual DbSet<vEmployeeOccupation> vEmployeeOccupations { get; set; }
        public virtual DbSet<vGetEmployee> vGetEmployees { get; set; }
        public virtual DbSet<vGetEmployee1> vGetEmployees1 { get; set; }
    
        public virtual int spapCertificationAgency(string certificationAgency)
        {
            var certificationAgencyParameter = certificationAgency != null ?
                new ObjectParameter("CertificationAgency", certificationAgency) :
                new ObjectParameter("CertificationAgency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spapCertificationAgency", certificationAgencyParameter);
        }
    
        public virtual int spDelCertificationAgency(Nullable<int> certificationAgencyID)
        {
            var certificationAgencyIDParameter = certificationAgencyID.HasValue ?
                new ObjectParameter("CertificationAgencyID", certificationAgencyID) :
                new ObjectParameter("CertificationAgencyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDelCertificationAgency", certificationAgencyIDParameter);
        }
    
        public virtual int spDelCourse(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDelCourse", courseIDParameter);
        }
    
        public virtual int spDelCrewDetail(Nullable<short> crewID, Nullable<int> employeeID)
        {
            var crewIDParameter = crewID.HasValue ?
                new ObjectParameter("CrewID", crewID) :
                new ObjectParameter("CrewID", typeof(short));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDelCrewDetail", crewIDParameter, employeeIDParameter);
        }
    
        public virtual int spDelCrews(Nullable<short> crewID)
        {
            var crewIDParameter = crewID.HasValue ?
                new ObjectParameter("CrewID", crewID) :
                new ObjectParameter("CrewID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDelCrews", crewIDParameter);
        }
    
        public virtual int spDelEmployee(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDelEmployee", employeeIDParameter);
        }
    
        public virtual int spDelInstructor(Nullable<int> instructorID)
        {
            var instructorIDParameter = instructorID.HasValue ?
                new ObjectParameter("InstructorID", instructorID) :
                new ObjectParameter("InstructorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDelInstructor", instructorIDParameter);
        }
    
        public virtual int spInsCourse(string courseDescription, Nullable<short> certificationAgencyID, Nullable<byte> courseLength, string courseLengthUnit, Nullable<byte> renewalPeriodMonths, Nullable<System.DateTime> createdOn, Nullable<int> createdBy)
        {
            var courseDescriptionParameter = courseDescription != null ?
                new ObjectParameter("CourseDescription", courseDescription) :
                new ObjectParameter("CourseDescription", typeof(string));
    
            var certificationAgencyIDParameter = certificationAgencyID.HasValue ?
                new ObjectParameter("CertificationAgencyID", certificationAgencyID) :
                new ObjectParameter("CertificationAgencyID", typeof(short));
    
            var courseLengthParameter = courseLength.HasValue ?
                new ObjectParameter("CourseLength", courseLength) :
                new ObjectParameter("CourseLength", typeof(byte));
    
            var courseLengthUnitParameter = courseLengthUnit != null ?
                new ObjectParameter("CourseLengthUnit", courseLengthUnit) :
                new ObjectParameter("CourseLengthUnit", typeof(string));
    
            var renewalPeriodMonthsParameter = renewalPeriodMonths.HasValue ?
                new ObjectParameter("RenewalPeriodMonths", renewalPeriodMonths) :
                new ObjectParameter("RenewalPeriodMonths", typeof(byte));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsCourse", courseDescriptionParameter, certificationAgencyIDParameter, courseLengthParameter, courseLengthUnitParameter, renewalPeriodMonthsParameter, createdOnParameter, createdByParameter);
        }
    
        public virtual int spInsCoursesTaken(Nullable<int> courseID, Nullable<int> employeeID, Nullable<System.DateTime> certificationDate, Nullable<int> classID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var certificationDateParameter = certificationDate.HasValue ?
                new ObjectParameter("CertificationDate", certificationDate) :
                new ObjectParameter("CertificationDate", typeof(System.DateTime));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsCoursesTaken", courseIDParameter, employeeIDParameter, certificationDateParameter, classIDParameter);
        }
    
        public virtual int spInsCrewDetail(Nullable<short> crewID, Nullable<int> employeeID)
        {
            var crewIDParameter = crewID.HasValue ?
                new ObjectParameter("CrewID", crewID) :
                new ObjectParameter("CrewID", typeof(short));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsCrewDetail", crewIDParameter, employeeIDParameter);
        }
    
        public virtual int spInsCrews(string crewName, Nullable<short> crewStatusID, Nullable<System.DateTime> createdOn, Nullable<int> createdBy)
        {
            var crewNameParameter = crewName != null ?
                new ObjectParameter("CrewName", crewName) :
                new ObjectParameter("CrewName", typeof(string));
    
            var crewStatusIDParameter = crewStatusID.HasValue ?
                new ObjectParameter("CrewStatusID", crewStatusID) :
                new ObjectParameter("CrewStatusID", typeof(short));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsCrews", crewNameParameter, crewStatusIDParameter, createdOnParameter, createdByParameter);
        }
    
        public virtual int spInsEmployee(string tLEmployee, string employeeFirstName, string employeeLastName, Nullable<byte> employeeStatusID, string dBID, string occupation, string department, Nullable<System.DateTime> terminationDate, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> hireDate, Nullable<short> positionId)
        {
            var tLEmployeeParameter = tLEmployee != null ?
                new ObjectParameter("TLEmployee", tLEmployee) :
                new ObjectParameter("TLEmployee", typeof(string));
    
            var employeeFirstNameParameter = employeeFirstName != null ?
                new ObjectParameter("EmployeeFirstName", employeeFirstName) :
                new ObjectParameter("EmployeeFirstName", typeof(string));
    
            var employeeLastNameParameter = employeeLastName != null ?
                new ObjectParameter("EmployeeLastName", employeeLastName) :
                new ObjectParameter("EmployeeLastName", typeof(string));
    
            var employeeStatusIDParameter = employeeStatusID.HasValue ?
                new ObjectParameter("EmployeeStatusID", employeeStatusID) :
                new ObjectParameter("EmployeeStatusID", typeof(byte));
    
            var dBIDParameter = dBID != null ?
                new ObjectParameter("DBID", dBID) :
                new ObjectParameter("DBID", typeof(string));
    
            var occupationParameter = occupation != null ?
                new ObjectParameter("Occupation", occupation) :
                new ObjectParameter("Occupation", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var terminationDateParameter = terminationDate.HasValue ?
                new ObjectParameter("TerminationDate", terminationDate) :
                new ObjectParameter("TerminationDate", typeof(System.DateTime));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var hireDateParameter = hireDate.HasValue ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(System.DateTime));
    
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsEmployee", tLEmployeeParameter, employeeFirstNameParameter, employeeLastNameParameter, employeeStatusIDParameter, dBIDParameter, occupationParameter, departmentParameter, terminationDateParameter, createdOnParameter, createdByParameter, hireDateParameter, positionIdParameter);
        }
    
        public virtual int spInsEmployeeHistory(Nullable<int> employeeID, string employeeNotes)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var employeeNotesParameter = employeeNotes != null ?
                new ObjectParameter("EmployeeNotes", employeeNotes) :
                new ObjectParameter("EmployeeNotes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsEmployeeHistory", employeeIDParameter, employeeNotesParameter);
        }
    
        public virtual int spInsInstructor(string instructorName, string status, Nullable<int> companyId, Nullable<bool> unionHired, Nullable<System.DateTime> createdOn, Nullable<int> createdBy)
        {
            var instructorNameParameter = instructorName != null ?
                new ObjectParameter("InstructorName", instructorName) :
                new ObjectParameter("InstructorName", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var unionHiredParameter = unionHired.HasValue ?
                new ObjectParameter("UnionHired", unionHired) :
                new ObjectParameter("UnionHired", typeof(bool));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsInstructor", instructorNameParameter, statusParameter, companyIdParameter, unionHiredParameter, createdOnParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spIsCrewMember(Nullable<short> crewID, Nullable<int> employeeID)
        {
            var crewIDParameter = crewID.HasValue ?
                new ObjectParameter("CrewID", crewID) :
                new ObjectParameter("CrewID", typeof(short));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spIsCrewMember", crewIDParameter, employeeIDParameter);
        }
    
        public virtual ObjectResult<spseCertificationAgency_Result> spseCertificationAgency()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spseCertificationAgency_Result>("spseCertificationAgency");
        }
    
        public virtual ObjectResult<spSelCertificationAgency_Result> spSelCertificationAgency(Nullable<int> certificationAgencyID)
        {
            var certificationAgencyIDParameter = certificationAgencyID.HasValue ?
                new ObjectParameter("CertificationAgencyID", certificationAgencyID) :
                new ObjectParameter("CertificationAgencyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelCertificationAgency_Result>("spSelCertificationAgency", certificationAgencyIDParameter);
        }
    
        public virtual ObjectResult<spSelCertificationAgencyAll_Result> spSelCertificationAgencyAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelCertificationAgencyAll_Result>("spSelCertificationAgencyAll");
        }
    
        public virtual ObjectResult<spSelCertificationAgencybyName_Result> spSelCertificationAgencybyName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelCertificationAgencybyName_Result>("spSelCertificationAgencybyName", nameParameter);
        }
    
        public virtual int spselClassesSearch(Nullable<int> regionID, string employeeID, string firstName, string lastName, string courseDescription, string certificationDate, string expired, string hireDate, string employeeStatusID, Nullable<short> daysUntilExpire, string sortBy, string tLEmployee, string locationCode)
        {
            var regionIDParameter = regionID.HasValue ?
                new ObjectParameter("RegionID", regionID) :
                new ObjectParameter("RegionID", typeof(int));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var courseDescriptionParameter = courseDescription != null ?
                new ObjectParameter("CourseDescription", courseDescription) :
                new ObjectParameter("CourseDescription", typeof(string));
    
            var certificationDateParameter = certificationDate != null ?
                new ObjectParameter("CertificationDate", certificationDate) :
                new ObjectParameter("CertificationDate", typeof(string));
    
            var expiredParameter = expired != null ?
                new ObjectParameter("Expired", expired) :
                new ObjectParameter("Expired", typeof(string));
    
            var hireDateParameter = hireDate != null ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(string));
    
            var employeeStatusIDParameter = employeeStatusID != null ?
                new ObjectParameter("EmployeeStatusID", employeeStatusID) :
                new ObjectParameter("EmployeeStatusID", typeof(string));
    
            var daysUntilExpireParameter = daysUntilExpire.HasValue ?
                new ObjectParameter("DaysUntilExpire", daysUntilExpire) :
                new ObjectParameter("DaysUntilExpire", typeof(short));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("SortBy", sortBy) :
                new ObjectParameter("SortBy", typeof(string));
    
            var tLEmployeeParameter = tLEmployee != null ?
                new ObjectParameter("TLEmployee", tLEmployee) :
                new ObjectParameter("TLEmployee", typeof(string));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spselClassesSearch", regionIDParameter, employeeIDParameter, firstNameParameter, lastNameParameter, courseDescriptionParameter, certificationDateParameter, expiredParameter, hireDateParameter, employeeStatusIDParameter, daysUntilExpireParameter, sortByParameter, tLEmployeeParameter, locationCodeParameter);
        }
    
        public virtual ObjectResult<spSelCourse_Result> spSelCourse(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelCourse_Result>("spSelCourse", courseIDParameter);
        }
    
        public virtual ObjectResult<spSelCourses_Result> spSelCourses(string dBID)
        {
            var dBIDParameter = dBID != null ?
                new ObjectParameter("DBID", dBID) :
                new ObjectParameter("DBID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelCourses_Result>("spSelCourses", dBIDParameter);
        }
    
        public virtual int spselCoursesTakenSearch(string dBID, string employeeID, string firstName, string lastName, string courseDescription, string certificationDate, string expired, string hireDate, string employeeStatusID, Nullable<short> daysUntilExpire, string sortBy, string tLEmployee, string locationCode)
        {
            var dBIDParameter = dBID != null ?
                new ObjectParameter("DBID", dBID) :
                new ObjectParameter("DBID", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var courseDescriptionParameter = courseDescription != null ?
                new ObjectParameter("CourseDescription", courseDescription) :
                new ObjectParameter("CourseDescription", typeof(string));
    
            var certificationDateParameter = certificationDate != null ?
                new ObjectParameter("CertificationDate", certificationDate) :
                new ObjectParameter("CertificationDate", typeof(string));
    
            var expiredParameter = expired != null ?
                new ObjectParameter("Expired", expired) :
                new ObjectParameter("Expired", typeof(string));
    
            var hireDateParameter = hireDate != null ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(string));
    
            var employeeStatusIDParameter = employeeStatusID != null ?
                new ObjectParameter("EmployeeStatusID", employeeStatusID) :
                new ObjectParameter("EmployeeStatusID", typeof(string));
    
            var daysUntilExpireParameter = daysUntilExpire.HasValue ?
                new ObjectParameter("DaysUntilExpire", daysUntilExpire) :
                new ObjectParameter("DaysUntilExpire", typeof(short));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("SortBy", sortBy) :
                new ObjectParameter("SortBy", typeof(string));
    
            var tLEmployeeParameter = tLEmployee != null ?
                new ObjectParameter("TLEmployee", tLEmployee) :
                new ObjectParameter("TLEmployee", typeof(string));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spselCoursesTakenSearch", dBIDParameter, employeeIDParameter, firstNameParameter, lastNameParameter, courseDescriptionParameter, certificationDateParameter, expiredParameter, hireDateParameter, employeeStatusIDParameter, daysUntilExpireParameter, sortByParameter, tLEmployeeParameter, locationCodeParameter);
        }
    
        public virtual ObjectResult<spSelCourseVar_Result> spSelCourseVar(string whereExpr)
        {
            var whereExprParameter = whereExpr != null ?
                new ObjectParameter("whereExpr", whereExpr) :
                new ObjectParameter("whereExpr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelCourseVar_Result>("spSelCourseVar", whereExprParameter);
        }
    
        public virtual ObjectResult<spSelCrewByName_Result> spSelCrewByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelCrewByName_Result>("spSelCrewByName", nameParameter);
        }
    
        public virtual ObjectResult<spSelCrewMembers_Result> spSelCrewMembers(Nullable<short> crewID)
        {
            var crewIDParameter = crewID.HasValue ?
                new ObjectParameter("CrewID", crewID) :
                new ObjectParameter("CrewID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelCrewMembers_Result>("spSelCrewMembers", crewIDParameter);
        }
    
        public virtual ObjectResult<spSelCrews_Result> spSelCrews(Nullable<short> crewID)
        {
            var crewIDParameter = crewID.HasValue ?
                new ObjectParameter("CrewID", crewID) :
                new ObjectParameter("CrewID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelCrews_Result>("spSelCrews", crewIDParameter);
        }
    
        public virtual ObjectResult<spSelCrewsAll_Result> spSelCrewsAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelCrewsAll_Result>("spSelCrewsAll");
        }
    
        public virtual ObjectResult<spSelCrewStatus_Result> spSelCrewStatus(Nullable<short> crewStatusID)
        {
            var crewStatusIDParameter = crewStatusID.HasValue ?
                new ObjectParameter("CrewStatusID", crewStatusID) :
                new ObjectParameter("CrewStatusID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelCrewStatus_Result>("spSelCrewStatus", crewStatusIDParameter);
        }
    
        public virtual ObjectResult<spSelCrewStatusAll_Result> spSelCrewStatusAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelCrewStatusAll_Result>("spSelCrewStatusAll");
        }
    
        public virtual ObjectResult<Nullable<byte>> spSelCrewStatusId(string crewStatus)
        {
            var crewStatusParameter = crewStatus != null ?
                new ObjectParameter("CrewStatus", crewStatus) :
                new ObjectParameter("CrewStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<byte>>("spSelCrewStatusId", crewStatusParameter);
        }
    
        public virtual ObjectResult<spSelEmployee_Result> spSelEmployee(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelEmployee_Result>("spSelEmployee", employeeIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spSelEmployeeCount(string whereclase)
        {
            var whereclaseParameter = whereclase != null ?
                new ObjectParameter("whereclase", whereclase) :
                new ObjectParameter("whereclase", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spSelEmployeeCount", whereclaseParameter);
        }
    
        public virtual ObjectResult<spSelEmployeePositionAll_Result> spSelEmployeePositionAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelEmployeePositionAll_Result>("spSelEmployeePositionAll");
        }
    
        public virtual ObjectResult<spSelEmployeesPaging_Result> spSelEmployeesPaging(Nullable<int> startRowIndex, Nullable<int> maximumRows, string whereClause)
        {
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("startRowIndex", startRowIndex) :
                new ObjectParameter("startRowIndex", typeof(int));
    
            var maximumRowsParameter = maximumRows.HasValue ?
                new ObjectParameter("maximumRows", maximumRows) :
                new ObjectParameter("maximumRows", typeof(int));
    
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("whereClause", whereClause) :
                new ObjectParameter("whereClause", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelEmployeesPaging_Result>("spSelEmployeesPaging", startRowIndexParameter, maximumRowsParameter, whereClauseParameter);
        }
    
        public virtual ObjectResult<spSelEmployeeStatus_Result> spSelEmployeeStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelEmployeeStatus_Result>("spSelEmployeeStatus");
        }
    
        public virtual ObjectResult<Nullable<byte>> spSelEmployeeStatusId(string employeeStatus)
        {
            var employeeStatusParameter = employeeStatus != null ?
                new ObjectParameter("EmployeeStatus", employeeStatus) :
                new ObjectParameter("EmployeeStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<byte>>("spSelEmployeeStatusId", employeeStatusParameter);
        }
    
        public virtual ObjectResult<string> spSelEmployeeStatusText(Nullable<int> employeeStatusID)
        {
            var employeeStatusIDParameter = employeeStatusID.HasValue ?
                new ObjectParameter("EmployeeStatusID", employeeStatusID) :
                new ObjectParameter("EmployeeStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spSelEmployeeStatusText", employeeStatusIDParameter);
        }
    
        public virtual ObjectResult<spSelEmployeeVar_Result> spSelEmployeeVar(string whereExpr)
        {
            var whereExprParameter = whereExpr != null ?
                new ObjectParameter("whereExpr", whereExpr) :
                new ObjectParameter("whereExpr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelEmployeeVar_Result>("spSelEmployeeVar", whereExprParameter);
        }
    
        public virtual ObjectResult<spSelInstructor_Result> spSelInstructor(Nullable<int> instructorID)
        {
            var instructorIDParameter = instructorID.HasValue ?
                new ObjectParameter("InstructorID", instructorID) :
                new ObjectParameter("InstructorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelInstructor_Result>("spSelInstructor", instructorIDParameter);
        }
    
        public virtual ObjectResult<spSelInstructorAll_Result> spSelInstructorAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelInstructorAll_Result>("spSelInstructorAll");
        }
    
        public virtual int spselMedicalSearch(string dBID, string employeeID, string firstName, string lastName, string medicalTest, string expired, Nullable<short> daysUntilExpire, string employeeStatusID, string sortBy, string tLEmployee, string locationCode)
        {
            var dBIDParameter = dBID != null ?
                new ObjectParameter("DBID", dBID) :
                new ObjectParameter("DBID", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var medicalTestParameter = medicalTest != null ?
                new ObjectParameter("MedicalTest", medicalTest) :
                new ObjectParameter("MedicalTest", typeof(string));
    
            var expiredParameter = expired != null ?
                new ObjectParameter("Expired", expired) :
                new ObjectParameter("Expired", typeof(string));
    
            var daysUntilExpireParameter = daysUntilExpire.HasValue ?
                new ObjectParameter("DaysUntilExpire", daysUntilExpire) :
                new ObjectParameter("DaysUntilExpire", typeof(short));
    
            var employeeStatusIDParameter = employeeStatusID != null ?
                new ObjectParameter("EmployeeStatusID", employeeStatusID) :
                new ObjectParameter("EmployeeStatusID", typeof(string));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("SortBy", sortBy) :
                new ObjectParameter("SortBy", typeof(string));
    
            var tLEmployeeParameter = tLEmployee != null ?
                new ObjectParameter("TLEmployee", tLEmployee) :
                new ObjectParameter("TLEmployee", typeof(string));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spselMedicalSearch", dBIDParameter, employeeIDParameter, firstNameParameter, lastNameParameter, medicalTestParameter, expiredParameter, daysUntilExpireParameter, employeeStatusIDParameter, sortByParameter, tLEmployeeParameter, locationCodeParameter);
        }
    
        public virtual int spupCertificationAgency(Nullable<short> certificationAgencyID, string certificationAgency)
        {
            var certificationAgencyIDParameter = certificationAgencyID.HasValue ?
                new ObjectParameter("CertificationAgencyID", certificationAgencyID) :
                new ObjectParameter("CertificationAgencyID", typeof(short));
    
            var certificationAgencyParameter = certificationAgency != null ?
                new ObjectParameter("CertificationAgency", certificationAgency) :
                new ObjectParameter("CertificationAgency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spupCertificationAgency", certificationAgencyIDParameter, certificationAgencyParameter);
        }
    
        public virtual int spUpdCertificationAgency(Nullable<short> certificationAgencyID, string certificationAgency, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy)
        {
            var certificationAgencyIDParameter = certificationAgencyID.HasValue ?
                new ObjectParameter("CertificationAgencyID", certificationAgencyID) :
                new ObjectParameter("CertificationAgencyID", typeof(short));
    
            var certificationAgencyParameter = certificationAgency != null ?
                new ObjectParameter("CertificationAgency", certificationAgency) :
                new ObjectParameter("CertificationAgency", typeof(string));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdCertificationAgency", certificationAgencyIDParameter, certificationAgencyParameter, modifiedOnParameter, modifiedByParameter);
        }
    
        public virtual int spUpdCourse(Nullable<int> courseID, string courseDescription, Nullable<short> certificationAgencyID, Nullable<byte> courseLength, string courseLengthUnit, Nullable<byte> renewalPeriodMonths, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var courseDescriptionParameter = courseDescription != null ?
                new ObjectParameter("CourseDescription", courseDescription) :
                new ObjectParameter("CourseDescription", typeof(string));
    
            var certificationAgencyIDParameter = certificationAgencyID.HasValue ?
                new ObjectParameter("CertificationAgencyID", certificationAgencyID) :
                new ObjectParameter("CertificationAgencyID", typeof(short));
    
            var courseLengthParameter = courseLength.HasValue ?
                new ObjectParameter("CourseLength", courseLength) :
                new ObjectParameter("CourseLength", typeof(byte));
    
            var courseLengthUnitParameter = courseLengthUnit != null ?
                new ObjectParameter("CourseLengthUnit", courseLengthUnit) :
                new ObjectParameter("CourseLengthUnit", typeof(string));
    
            var renewalPeriodMonthsParameter = renewalPeriodMonths.HasValue ?
                new ObjectParameter("RenewalPeriodMonths", renewalPeriodMonths) :
                new ObjectParameter("RenewalPeriodMonths", typeof(byte));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdCourse", courseIDParameter, courseDescriptionParameter, certificationAgencyIDParameter, courseLengthParameter, courseLengthUnitParameter, renewalPeriodMonthsParameter, modifiedOnParameter, modifiedByParameter);
        }
    
        public virtual int spUpdCrews(Nullable<short> crewID, string crewName, Nullable<short> crewStatusID, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy)
        {
            var crewIDParameter = crewID.HasValue ?
                new ObjectParameter("CrewID", crewID) :
                new ObjectParameter("CrewID", typeof(short));
    
            var crewNameParameter = crewName != null ?
                new ObjectParameter("CrewName", crewName) :
                new ObjectParameter("CrewName", typeof(string));
    
            var crewStatusIDParameter = crewStatusID.HasValue ?
                new ObjectParameter("CrewStatusID", crewStatusID) :
                new ObjectParameter("CrewStatusID", typeof(short));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdCrews", crewIDParameter, crewNameParameter, crewStatusIDParameter, modifiedOnParameter, modifiedByParameter);
        }
    
        public virtual int spUpdEmployee(Nullable<int> employeeID, string tLEmployee, string employeeFirstName, string employeeLastName, Nullable<byte> employeeStatusID, string dBID, string occupation, string department, Nullable<System.DateTime> terminationDate, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy, Nullable<System.DateTime> hireDate, Nullable<short> positionId)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var tLEmployeeParameter = tLEmployee != null ?
                new ObjectParameter("TLEmployee", tLEmployee) :
                new ObjectParameter("TLEmployee", typeof(string));
    
            var employeeFirstNameParameter = employeeFirstName != null ?
                new ObjectParameter("EmployeeFirstName", employeeFirstName) :
                new ObjectParameter("EmployeeFirstName", typeof(string));
    
            var employeeLastNameParameter = employeeLastName != null ?
                new ObjectParameter("EmployeeLastName", employeeLastName) :
                new ObjectParameter("EmployeeLastName", typeof(string));
    
            var employeeStatusIDParameter = employeeStatusID.HasValue ?
                new ObjectParameter("EmployeeStatusID", employeeStatusID) :
                new ObjectParameter("EmployeeStatusID", typeof(byte));
    
            var dBIDParameter = dBID != null ?
                new ObjectParameter("DBID", dBID) :
                new ObjectParameter("DBID", typeof(string));
    
            var occupationParameter = occupation != null ?
                new ObjectParameter("Occupation", occupation) :
                new ObjectParameter("Occupation", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var terminationDateParameter = terminationDate.HasValue ?
                new ObjectParameter("TerminationDate", terminationDate) :
                new ObjectParameter("TerminationDate", typeof(System.DateTime));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var hireDateParameter = hireDate.HasValue ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(System.DateTime));
    
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdEmployee", employeeIDParameter, tLEmployeeParameter, employeeFirstNameParameter, employeeLastNameParameter, employeeStatusIDParameter, dBIDParameter, occupationParameter, departmentParameter, terminationDateParameter, modifiedOnParameter, modifiedByParameter, hireDateParameter, positionIdParameter);
        }
    
        public virtual int spUpdInstructor(Nullable<int> instructorID, string instructorName, string status, Nullable<int> companyId, Nullable<bool> unionHired, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy)
        {
            var instructorIDParameter = instructorID.HasValue ?
                new ObjectParameter("InstructorID", instructorID) :
                new ObjectParameter("InstructorID", typeof(int));
    
            var instructorNameParameter = instructorName != null ?
                new ObjectParameter("InstructorName", instructorName) :
                new ObjectParameter("InstructorName", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var unionHiredParameter = unionHired.HasValue ?
                new ObjectParameter("UnionHired", unionHired) :
                new ObjectParameter("UnionHired", typeof(bool));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdInstructor", instructorIDParameter, instructorNameParameter, statusParameter, companyIdParameter, unionHiredParameter, modifiedOnParameter, modifiedByParameter);
        }
    }
}
